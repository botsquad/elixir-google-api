# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BusinessMessages.V1.Model.BusinessMessagesMessage do
  @moduledoc """
  A message in a conversation between an agent and a user.

  ## Attributes

  *   `containsRichText` (*type:* `boolean()`, *default:* `nil`) - Optional. If `true`, indicates that the message contains rich text. If the message contains invalid formatting, Business Messages returns an error.
  *   `fallback` (*type:* `String.t`, *default:* `nil`) - Optional. Fallback text that displays if the user's device doesn't support the message type or content. Maximum 3,072 characters.
  *   `image` (*type:* `GoogleApi.BusinessMessages.V1.Model.BusinessMessagesImage.t`, *default:* `nil`) - Image message.
  *   `messageId` (*type:* `String.t`, *default:* `nil`) - Required. The unique identifier of the message, assigned by the agent. If a message attempts to use the same `messageId` as a previous message, the proper delivery of the message could be affected.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the message, as set by Business Messages. Resolves to "conversations/{conversationId}/messages/{messageId}", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.
  *   `representative` (*type:* `GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative.t`, *default:* `nil`) - Details about the representative (human or chatbot) that sent the message.
  *   `richCard` (*type:* `GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRichCard.t`, *default:* `nil`) - Rich Card message.
  *   `suggestions` (*type:* `list(GoogleApi.BusinessMessages.V1.Model.BusinessMessagesSuggestion.t)`, *default:* `nil`) - A list of suggested replies that appear as a list of suggestion chips following the associated message. Maximum 13 suggestions. The chips only display when the associated message is the most recent message within the conversation (including both agent and user messages). The user can tap a suggested reply to send the text reply to the agent.
  *   `text` (*type:* `String.t`, *default:* `nil`) - Text message. Maximum 3,072 characters.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :containsRichText => boolean() | nil,
          :fallback => String.t() | nil,
          :image => GoogleApi.BusinessMessages.V1.Model.BusinessMessagesImage.t() | nil,
          :messageId => String.t() | nil,
          :name => String.t() | nil,
          :representative =>
            GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative.t() | nil,
          :richCard => GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRichCard.t() | nil,
          :suggestions =>
            list(GoogleApi.BusinessMessages.V1.Model.BusinessMessagesSuggestion.t()) | nil,
          :text => String.t() | nil
        }

  field(:containsRichText)
  field(:fallback)
  field(:image, as: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesImage)
  field(:messageId)
  field(:name)
  field(:representative, as: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative)
  field(:richCard, as: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRichCard)

  field(:suggestions,
    as: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesSuggestion,
    type: :list
  )

  field(:text)
end

defimpl Poison.Decoder, for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesMessage do
  def decode(value, options) do
    GoogleApi.BusinessMessages.V1.Model.BusinessMessagesMessage.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesMessage do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
