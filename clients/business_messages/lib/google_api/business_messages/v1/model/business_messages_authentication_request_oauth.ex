# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BusinessMessages.V1.Model.BusinessMessagesAuthenticationRequestOauth do
  @moduledoc """
  Details for authentication via OAuth.

  ## Attributes

  *   `clientId` (*type:* `String.t`, *default:* `nil`) - Required. The [ID](https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/) of the application that asks for authorization.
  *   `codeChallenge` (*type:* `String.t`, *default:* `nil`) - Required. The [code challenge](https://tools.ietf.org/html/rfc7636#section-4.2) used to exchange access tokens.
  *   `codeChallengeMethod` (*type:* `String.t`, *default:* `nil`) - Optional. The [code challenge method](https://www.oauth.com/oauth2-servers/pkce/authorization-request/) used to generate the code challenge. If this parameter is omitted, the server assumes `plain`.
  *   `scopes` (*type:* `list(String.t)`, *default:* `nil`) - Required. An array that specifies the [scopes](https://oauth.net/2/scope/) of the request.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clientId => String.t() | nil,
          :codeChallenge => String.t() | nil,
          :codeChallengeMethod => String.t() | nil,
          :scopes => list(String.t()) | nil
        }

  field(:clientId)
  field(:codeChallenge)
  field(:codeChallengeMethod)
  field(:scopes, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesAuthenticationRequestOauth do
  def decode(value, options) do
    GoogleApi.BusinessMessages.V1.Model.BusinessMessagesAuthenticationRequestOauth.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesAuthenticationRequestOauth do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
