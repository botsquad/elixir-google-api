# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BusinessMessages.V1.Model.BusinessMessagesEvent do
  @moduledoc """
  An event in a conversation between an agent and a user.

  ## Attributes

  *   `eventType` (*type:* `String.t`, *default:* `nil`) - The type of the event.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the event, as set by Business Messages. Resolves to "conversations/{conversationId}/events/{eventId}", where {conversationId} is the unique ID for the conversation and {eventId} is the unique ID for the event.
  *   `representative` (*type:* `GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative.t`, *default:* `nil`) - Details about the representative (human or chatbot) that sent the event.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :eventType => String.t() | nil,
          :name => String.t() | nil,
          :representative =>
            GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative.t() | nil
        }

  field(:eventType)
  field(:name)
  field(:representative, as: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesRepresentative)
end

defimpl Poison.Decoder, for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesEvent do
  def decode(value, options) do
    GoogleApi.BusinessMessages.V1.Model.BusinessMessagesEvent.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BusinessMessages.V1.Model.BusinessMessagesEvent do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
