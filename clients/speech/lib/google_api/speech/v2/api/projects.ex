# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Speech.V2.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.Speech.V2.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  
  @doc """
  Gets information about a location.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Resource name for the location.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Location{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Location.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Location{}])
  end
  
  @doc """
  Lists information about the supported locations for this service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The resource that owns the locations collection, if applicable.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filter` (*type:* `String.t`) - A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
      *   `:pageSize` (*type:* `integer()`) - The maximum number of results to return. If not set, the service selects a default.
      *   `:pageToken` (*type:* `String.t`) - A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.ListLocationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.ListLocationsResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_list(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"filter" => :"query",
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}/locations", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.ListLocationsResponse{}])
  end
  
  @doc """
  Returns the requested Config.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the config to retrieve. There is exactly one config resource per project per location. The expected format is `projects/{project}/locations/{location}/config`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Config{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_config_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Config.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_config_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Config{}])
  end
  
  @doc """
  Updates the Config.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Output only. The name of the config resource. There is exactly one config resource per project per location. The expected format is `projects/{project}/locations/{location}/config`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - The list of fields to be updated.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.Config.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Config{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_config_update(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Config.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_config_update(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"updateMask" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"patch")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Config{}])
  end
  
  @doc """
  Creates a CustomClass.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location where this CustomClass will be created. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:customClassId` (*type:* `String.t`) - The ID to use for the CustomClass, which will become the final component of the CustomClass's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the CustomClass, but do not actually create it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.CustomClass.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_create(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_create(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"customClassId" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+parent}/customClasses", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Deletes the CustomClass.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the CustomClass to delete. Format: `projects/{project}/locations/{location}/customClasses/{custom_class}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:allowMissing` (*type:* `boolean()`) - If set to true, and the CustomClass is not found, the request will succeed and be a no-op (no Operation is recorded in this case).
      *   `:etag` (*type:* `String.t`) - This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the deleted CustomClass, but do not actually delete it.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_delete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_delete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"allowMissing" => :"query",
    
      :"etag" => :"query",
    
      :"validateOnly" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"delete")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Returns the requested CustomClass.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the CustomClass to retrieve. The expected format is `projects/{project}/locations/{location}/customClasses/{custom_class}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.CustomClass{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.CustomClass.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.CustomClass{}])
  end
  
  @doc """
  Lists CustomClasses.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location of CustomClass resources to list. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - Number of results per requests. A valid page_size ranges from 0 to 100 inclusive. If the page_size is zero or unspecified, a page size of 5 will be chosen. If the page size exceeds 100, it will be coerced down to 100. Note that a call might return fewer results than the requested page size.
      *   `:pageToken` (*type:* `String.t`) - A page token, received from a previous ListCustomClasses call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListCustomClasses must match the call that provided the page token.
      *   `:showDeleted` (*type:* `boolean()`) - Whether, or not, to show resources that have been deleted.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.ListCustomClassesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.ListCustomClassesResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_list(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
      :"showDeleted" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+parent}/customClasses", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.ListCustomClassesResponse{}])
  end
  
  @doc """
  Updates the CustomClass.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Output only. The resource name of the CustomClass. Format: `projects/{project}/locations/{location}/customClasses/{custom_class}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - The list of fields to be updated. If empty, all fields are considered for update.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the updated CustomClass, but do not actually update it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.CustomClass.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_patch(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_patch(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"updateMask" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"patch")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Undeletes the CustomClass.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the CustomClass to undelete. Format: `projects/{project}/locations/{location}/customClasses/{custom_class}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.UndeleteCustomClassRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_custom_classes_undelete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_custom_classes_undelete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+name}:undelete", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation resource.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_operations_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_operations_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation's parent resource.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filter` (*type:* `String.t`) - The standard list filter.
      *   `:pageSize` (*type:* `integer()`) - The standard list page size.
      *   `:pageToken` (*type:* `String.t`) - The standard list page token.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.ListOperationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_operations_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.ListOperationsResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_operations_list(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"filter" => :"query",
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}/operations", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.ListOperationsResponse{}])
  end
  
  @doc """
  Creates a PhraseSet.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location where this PhraseSet will be created. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:phraseSetId` (*type:* `String.t`) - The ID to use for the PhraseSet, which will become the final component of the PhraseSet's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the PhraseSet, but do not actually create it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.PhraseSet.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_create(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_create(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"phraseSetId" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+parent}/phraseSets", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Deletes the PhraseSet.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the PhraseSet to delete. Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:allowMissing` (*type:* `boolean()`) - If set to true, and the PhraseSet is not found, the request will succeed and be a no-op (no Operation is recorded in this case).
      *   `:etag` (*type:* `String.t`) - This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the deleted PhraseSet, but do not actually delete it.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_delete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_delete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"allowMissing" => :"query",
    
      :"etag" => :"query",
    
      :"validateOnly" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"delete")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Returns the requested PhraseSet.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the PhraseSet to retrieve. The expected format is `projects/{project}/locations/{location}/phraseSets/{phrase_set}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.PhraseSet{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.PhraseSet.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.PhraseSet{}])
  end
  
  @doc """
  Lists PhraseSets.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location of PhraseSet resources to list. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of PhraseSets to return. The service may return fewer than this value. If unspecified, at most 5 PhraseSets will be returned. The maximum value is 100; values above 100 will be coerced to 100.
      *   `:pageToken` (*type:* `String.t`) - A page token, received from a previous ListPhraseSets call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListPhraseSets must match the call that provided the page token.
      *   `:showDeleted` (*type:* `boolean()`) - Whether, or not, to show resources that have been deleted.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.ListPhraseSetsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.ListPhraseSetsResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_list(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
      :"showDeleted" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+parent}/phraseSets", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.ListPhraseSetsResponse{}])
  end
  
  @doc """
  Updates the PhraseSet.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Output only. The resource name of the PhraseSet. Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - The list of fields to update. If empty, all non-default valued fields are considered for update. Use `*` to update the entire PhraseSet resource.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the updated PhraseSet, but do not actually update it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.PhraseSet.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_patch(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_patch(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"updateMask" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"patch")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Undeletes the PhraseSet.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the PhraseSet to undelete. Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.UndeletePhraseSetRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_phrase_sets_undelete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_phrase_sets_undelete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+name}:undelete", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Performs batch asynchronous speech recognition: send a request with N audio files and receive a long running operation that can be polled to see when the transcriptions are finished.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `recognizer` (*type:* `String.t`) - Required. The name of the Recognizer to use during recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. The {recognizer} segment may be set to `_` to use an empty implicit Recognizer.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.BatchRecognizeRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_batch_recognize(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_batch_recognize(connection, recognizer, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+recognizer}:batchRecognize", %{
        "recognizer" => URI.encode(recognizer, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Creates a Recognizer.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location where this Recognizer will be created. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:recognizerId` (*type:* `String.t`) - The ID to use for the Recognizer, which will become the final component of the Recognizer's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the Recognizer, but do not actually create it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.Recognizer.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_create(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_create(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"recognizerId" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+parent}/recognizers", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Deletes the Recognizer.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the Recognizer to delete. Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:allowMissing` (*type:* `boolean()`) - If set to true, and the Recognizer is not found, the request will succeed and be a no-op (no Operation is recorded in this case).
      *   `:etag` (*type:* `String.t`) - This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the deleted Recognizer, but do not actually delete it.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_delete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_delete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"allowMissing" => :"query",
    
      :"etag" => :"query",
    
      :"validateOnly" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"delete")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Returns the requested Recognizer. Fails with NOT_FOUND if the requested Recognizer doesn't exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the Recognizer to retrieve. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Recognizer{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Recognizer.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_get(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Recognizer{}])
  end
  
  @doc """
  Lists Recognizers.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project and location of Recognizers to list. The expected format is `projects/{project}/locations/{location}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Recognizers to return. The service may return fewer than this value. If unspecified, at most 5 Recognizers will be returned. The maximum value is 100; values above 100 will be coerced to 100.
      *   `:pageToken` (*type:* `String.t`) - A page token, received from a previous ListRecognizers call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListRecognizers must match the call that provided the page token.
      *   `:showDeleted` (*type:* `boolean()`) - Whether, or not, to show resources that have been deleted.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.ListRecognizersResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.ListRecognizersResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_list(connection, parent, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
      :"showDeleted" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v2/{+parent}/recognizers", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.ListRecognizersResponse{}])
  end
  
  @doc """
  Updates the Recognizer.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Output only. The resource name of the Recognizer. Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - The list of fields to update. If empty, all non-default valued fields are considered for update. Use `*` to update the entire Recognizer resource.
      *   `:validateOnly` (*type:* `boolean()`) - If set, validate the request and preview the updated Recognizer, but do not actually update it.
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.Recognizer.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_patch(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_patch(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"updateMask" => :"query",
    
      :"validateOnly" => :"query",
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"patch")
      |> Request.url("/v2/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
  @doc """
  Performs synchronous Speech recognition: receive results after all audio has been sent and processed.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `recognizer` (*type:* `String.t`) - Required. The name of the Recognizer to use during recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. The {recognizer} segment may be set to `_` to use an empty implicit Recognizer.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.RecognizeRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.RecognizeResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_recognize(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.RecognizeResponse.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_recognize(connection, recognizer, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+recognizer}:recognize", %{
        "recognizer" => URI.encode(recognizer, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.RecognizeResponse{}])
  end
  
  @doc """
  Undeletes the Recognizer.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Speech.V2.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the Recognizer to undelete. Format: `projects/{project}/locations/{location}/recognizers/{recognizer}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Speech.V2.Model.UndeleteRecognizerRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Speech.V2.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec speech_projects_locations_recognizers_undelete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Speech.V2.Model.Operation.t} | {:ok, Tesla.Env.t()} | {:ok, list()} | {:error, any()}
  def speech_projects_locations_recognizers_undelete(connection, name, optional_params \\ [], opts \\ []) do
    
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v2/{+name}:undelete", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Speech.V2.Model.Operation{}])
  end
  
end
